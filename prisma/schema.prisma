// Prisma schema for Neon (PostgreSQL)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id
  username   String?  @db.Text
  avatarUrl  String?  @db.Text
  createdAt  DateTime @default(now())
  sessions   Session[]
  jobs       Job[]
  subscriptions Subscription[]
  usages        MonthlyUsage[]
}

model Session {
  id          String   @id
  userId      String
  accessToken String?  @db.Text
  refreshToken String? @db.Text
  expiresAt   BigInt?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id            String   @id
  userId        String
  inputFilename String
  outputFilename String?
  status        String
  metaJson      String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// Billing & Usage

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

model Subscription {
  id          String   @id @default(cuid())
  userId      String
  plan        Plan
  status      String   // active, canceled, past_due, trialing
  validUntil  DateTime?
  source      String?  // e.g., "whop"
  externalId  String?  // e.g., membership/order id from Whop
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model MonthlyUsage {
  id          String   @id @default(cuid())
  userId      String
  month       String   // YYYY-MM
  videosUsed  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month])
}


